/// Sets with elements of type `K` are defined as Boolean functions over `K`
structure Set<K> {
    contains: K -> Bool
}

// Obvious sets
define constant_false<K>(x: K) -> Bool {
    false
}
define negate_fun<K>(f: K -> Bool, x: K) -> Bool {
    not f(x)
}
define singleton_fun<K>(a: K, x: K) -> Bool {
    a = x
}

theorem neg_of_neg_is_self<K>(f: K -> Bool) {
    negate_fun(negate_fun(f)) = f
} by {
    forall(x: K) {
        // Trick that helps the prover, thanks @lacker
        if f(x) {
            negate_fun(negate_fun(f), x) = f(x)
        } else {
            negate_fun(negate_fun(f), x) = f(x)
        }
    }
}

// Set basics
attributes Set<K> {
    let empty_set = Set<K>.new(constant_false<K>)
    let universal_set = Set<K>.new(negate_fun(constant_false<K>))
    let singleton: K -> Set<K> = function(a: K) {
        Set<K>.new(singleton_fun(a))
    }

    define is_empty(self) -> Bool {
        forall(x: K) {
            not self.contains(x)
        }
    }

    define c(self) -> Set<K> {
        Set<K>.new(negate_fun(self.contains))
    }

    define is_singleton(self) -> Bool {
        exists(a: K) {
            self = Set<K>.singleton(a)
        }
    }
}

theorem empty_set_is_empty<K> {
    (Set<K>.empty_set).is_empty
}

theorem singleton_set_is_singleton<K>(a: K) {
    (Set<K>.singleton(a)).is_singleton
}

theorem compl_of_compl_is_self<K>(s: Set<K>) {
    s.c.c = s
} by {
    forall(x: K) {
        if s.contains(x) {
            s.c.c.contains(x)
        } else {
            not s.c.c.contains(x)
        }
        s.c.c.contains(x) = s.contains(x)
    }

    s.c.c.contains = s.contains
}

theorem empty_set_compl_is_universal<K> {
    (Set<K>.empty_set).c = Set<K>.universal_set
} by {
    let e = Set<K>.empty_set
    let u = Set<K>.universal_set

    forall(x: K) {
        e.c.contains(x)
        u.contains(x)
    }

    e.c.contains = u.contains
}

theorem universal_set_compl_is_empty<K> {
    (Set<K>.universal_set).c = Set<K>.empty_set
} by {
    let e = Set<K>.empty_set
    let u = Set<K>.universal_set

    forall(x: K) {
        not u.c.contains(x)
        not e.contains(x)
    }

    u.c.contains = e.contains
}

theorem singleton_set_is_not_empty<K>(a: K) {
    (Set<K>.singleton(a)).is_empty = false
} by {
    let s = Set<K>.singleton(a)

    s.contains(a)
}

// Subsets
attributes Set<K> {
    // self \subseteq s
    define subset(self, s: Set<K>) -> Bool {
        forall(x: K) {
            self.contains(x) implies s.contains(x)
        }
    }

    define superset(self, s: Set<K>) -> Bool {
        s.subset(self)
    }
}

// Subset theorems
theorem empty_set_is_always_subset<K>(s: Set<K>) {
    (Set<K>.empty_set).subset(s)
}

theorem subset_refl<K>(s: Set<K>) {
    s.subset(s)
}

theorem subset_trans<K>(a: Set<K>, b: Set<K>, c: Set<K>) {
    a.subset(b) and b.subset(c) implies a.subset(c)
}

theorem double_inclusion<K>(a: Set<K>, b: Set<K>) {
    a.subset(b) and b.subset(a) implies a = b
} by {
    forall(x: K) {
        a.contains(x) implies b.contains(x)
        b.contains(x) implies a.contains(x)
        a.contains(x) = b.contains(x)
    }
    a.contains = b.contains
}

// "Standard" union and intersection of two sets
define elem_in_union<K>(a: Set<K>, b: Set<K>, x: K) -> Bool {
    a.contains(x) or b.contains(x)
}

define elem_in_intersection<K>(a: Set<K>, b: Set<K>, x: K) -> Bool {
    a.contains(x) and b.contains(x)
}

// Difference
define elem_in_difference<K>(a: Set<K>, b: Set<K>, x: K) -> Bool {
    a.contains(x) and not b.contains(x)
}

attributes Set<K> {
    // self \cup s
    define union(self, s: Set<K>) -> Set<K> {
        Set.new(elem_in_union(self, s))
    }

    // self \cap s
    define intersection(self, s: Set<K>) -> Set<K> {
        Set<K>.new(elem_in_intersection(self, s))
    }

    // self \setminus s
    define difference(self, s: Set<K>) -> Set<K> {
        Set<K>.new(elem_in_difference(self, s))
    }
}

// Union theorems
// A \subseteq A \cup B (and same with B)
theorem sets_subset_union<K>(a: Set<K>, b: Set<K>) {
    a.subset(a.union(b)) and b.subset(a.union(b))
} by {
    a.subset(a.union(b))
    b.subset(a.union(b))
}

// A \subseteq C and B \subseteq C implies A \cup B \subseteq C
theorem sets_subset_contain_union<K>(a: Set<K>, b: Set<K>, c: Set<K>) {
    a.subset(c) and b.subset(c) implies a.union(b).subset(c)
}

theorem union_comm<K>(a: Set<K>, b: Set<K>) {
    a.union(b) = b.union(a)
} by {
    let u = a.union(b)
    let v = b.union(a)

    v.subset(u)
    u.subset(v)
}

theorem union_assoc<K>(a: Set<K>, b: Set<K>, c: Set<K>) {
    a.union(b.union(c)) = a.union(b).union(c)
} by {
    let u = a.union(b.union(c))
    let v = a.union(b).union(c)

    // Note that A, B, C are subsets of U hence V is a subset of U
    a.subset(u)
    b.subset(u)
    c.subset(u)
    v.subset(u)

    // Reverse
    a.subset(v)
    b.subset(v)
    c.subset(v)
    u.subset(v)
}

theorem union_idemp<K>(s: Set<K>) {
    s.union(s) = s
}

theorem union_subset_is_set<K>(a: Set<K>, b: Set<K>) {
    a.subset(b) implies a.union(b) = b
}

theorem all_sets_subset_universal<K>(s: Set<K>) {
    s.subset(Set<K>.universal_set)
}

theorem union_with_universal_is_universal<K>(s: Set<K>) {
    s.union(Set<K>.universal_set) = Set<K>.universal_set
}

// Intersection theorems
theorem sets_subset_intersection<K>(a: Set<K>, b: Set<K>) {
    a.intersection(b).subset(a) and a.intersection(b).subset(b)
} by {
    a.intersection(b).subset(a)
    a.intersection(b).subset(b)
}

theorem set_supset_contains_intersection<K>(a: Set<K>, b: Set<K>, c: Set<K>) {
    a.superset(c) and b.superset(c) implies a.intersection(b).superset(c)
}

theorem intersection_comm<K>(a: Set<K>, b: Set<K>) {
    a.intersection(b) = b.intersection(a)
} by {
    let u = a.intersection(b)
    let v = b.intersection(a)

    forall(x: K) {
        if u.contains(x) {
            a.contains(x)
            b.contains(x)

            v.contains(x)
        }
    }
    u.subset(v)

    forall(x: K) {
        if v.contains(x) {
            a.contains(x)
            b.contains(x)

            u.contains(x)
        }
    }
    u.superset(v)
}

theorem intersection_assoc<K>(a: Set<K>, b: Set<K>, c: Set<K>) {
    a.intersection(b.intersection(c)) = a.intersection(b).intersection(c)
} by {
    let u = a.intersection(b.intersection(c))
    let v = a.intersection(b).intersection(c)

    // See union proof for comments
    a.superset(u)
    b.superset(b.intersection(c))
    b.superset(u)
    c.superset(b.intersection(c))
    c.superset(u)
    v.superset(u)

    a.superset(a.intersection(b))
    a.superset(v)
    b.superset(a.intersection(b))
    b.superset(v)
    c.superset(v)
    u.superset(v)
}

// Union + intersection theorems
theorem union_intersection_distrib<K>(a: Set<K>, b: Set<K>, c: Set<K>) {
    a.union(b.intersection(c)) = a.union(b).intersection(a.union(c))
} by {
    let u = a.union(b.intersection(c))
    let v = a.union(b).intersection(a.union(c))

    // Forward direction ("easy")
    a.subset(a.union(b))
    a.subset(a.union(c))
    a.subset(v)

    let bc = b.intersection(c)
    bc.subset(a.union(b))
    bc.subset(a.union(c))
    v.superset(bc)
    bc.subset(v)

    u.subset(v)

    // Other direction
    forall(x: K) {
        if v.contains(x) {
            a.union(b).contains(x)
            a.union(c).contains(x)

            if a.contains(x) {
                u.contains(x)
            } else {
                b.contains(x)
                c.contains(x)
                b.intersection(c).contains(x)
                u.contains(x)
            }
        }
    }
    v.subset(u)
}

// Union and intersection over a family of sets
define or_family<K, I> (f: I -> Set<K>, x: K) -> Bool {
    exists(i: I) {
        f(i).contains(x)
    }
}

define and_family<K, I> (f: I -> Set<K>, x: K) -> Bool {
    forall(i: I) {
        f(i).contains(x)
    }
}

define union_family<K, I>(f: I -> Set<K>) -> Set<K> {
    Set<K>.new(or_family(f))
}

define intersection_family<K, I>(f: I -> Set<K>) -> Set<K> {
    Set<K>.new(and_family(f))
}

// Proving indexed union and intersection definitions are consistent
// with family definitions
inductive TwoType {
    first
    second
}

// Creates a function f: TwoType -> Set<K>
define fun_of_two<K>(a: Set<K>, b: Set<K>, x: TwoType) -> Set<K> {
    match x {
        TwoType.first {
            a
        }
        TwoType.second {
            b
        }
    }
}

// Defines union in the case of two sets using family definition
define family_union_of_two<K>(a: Set<K>, b: Set<K>) -> Set<K> {
    union_family(fun_of_two(a, b))
}

theorem union_is_family_union_of_two<K>(a: Set<K>, b: Set<K>) {
    a.union(b) = family_union_of_two(a, b)
} by {
    let u = a.union(b)
    let v = family_union_of_two(a, b)
    let f_two = fun_of_two(a, b)
    // v_simp unrolls definitions, which helps the prover
    let v_simp = union_family(f_two)

    v = v_simp

    // Helps with definitions
    f_two(TwoType.first) = a
    f_two(TwoType.second) = b

    // First prove that u \subseteq v
    forall(x: K) {
        // Somehow this helps the prover though it only really unrolls definitions
        u.contains(x) implies a.union(b).contains(x)
        u.contains(x) implies (a.contains(x) or b.contains(x))
        a.contains(x) implies v_simp.contains(x)
        b.contains(x) implies v_simp.contains(x)

        u.contains(x) implies v.contains(x)
    }
    u.subset(v)

    // Now prove that v \subseteq u
    forall(x: K) {
        if v.contains(x) {
            // Definition of v.contains(x), unrolled
            v_simp.contains(x)

            let (t: TwoType) satisfy {
                f_two(t).contains(x)
            }

            match t {
                TwoType.first {
                    a.contains(x)
                }
                TwoType.second {
                    b.contains(x)
                }
            }

            u.contains(x)
        }
    }
    v.subset(u)
}

theorem intersection_is_family_intersection_of_two<K>(a: Set<K>, b: Set<K>) {
    a.intersection(b) = intersection_family(fun_of_two(a, b))
} by {
    let u = a.intersection(b)
    let v = intersection_family(fun_of_two(a, b))
    let f_two = fun_of_two(a, b)

    // First prove that u \subseteq v
    forall(x: K) {
        if u.contains(x) {
            a.contains(x)
            b.contains(x)

            forall(t: TwoType) {
                match t {
                    TwoType.first {
                        f_two(t).contains(x)
                    }
                    TwoType.second {
                        f_two(t).contains(x)
                    }
                }
            }

            v.contains(x)
        }

        u.contains(x) implies v.contains(x)
    }
    u.subset(v)

    // Makes life a little easier for the prover
    f_two(TwoType.first) = a
    f_two(TwoType.second) = b

    // Now prove that v \subseteq u
    forall(x: K) {
        if v.contains(x) {
            // Definitions unrolled
            intersection_family(f_two).contains(x)
            f_two(TwoType.first).contains(x)
            f_two(TwoType.second).contains(x)

            u.contains(x)
        }
    }
    v.subset(u)
}

// XXX: Prove that any type `T` with a bijection to `TwoType` will have union
// and intersection also work and match the standard pairwise definitions

// Function stuff, broken due to some CNF problems
// define image<K, V>(f: K -> V) -> Set<V> {
//     Set<V>.new(function(x: V) {
//         exists(k: K) {
//             f(k) = x
//         }
//     })
// }

// define image_over_set<K, V>(f: K -> V, s: Set<K>) -> Set<V> {
//     Set<V>.new(function(x: V) {
//         exists(k: K) {
//             s.contains(k) and f(k) = x
//         }
//     })
// }

// define is_constant_function<K, V>(f: K -> V) -> Bool {
//     exists(x: K) {
//         forall(y: K) {
//             f(x) = f(y)
//         }
//     }
// }

// theorem constant_function_has_singleton_image<K, V>(f: K -> V) {
//     is_constant_function(f) implies image(f).is_singleton
// } by {
//     let (x: K) satisfy {
//         forall(y: K) {
//             f(x) = f(y)
//         }
//     }
// }

// Cardinality stuff (unfortunately, this is slightly complicated here without dependent types)
from nat import Nat

// Bounded for elements in the set
define bounded_by_n<K>(s: Set<K>, n: Nat, f: K -> Nat) -> Bool {
    forall(x: K) {
        s.contains(x) implies f(x) < n
    }
}

// Injective over restriction
define injective_restricted<K>(s: Set<K>, f: K -> Nat) -> Bool {
    forall(x: K, y: K) {
        if (s.contains(x) and s.contains(y)) {
            f(x) = f(y) implies x = y
        }
    }
}

attributes Set<K> {
    // A set's cardinality is bounded above by `n` if there exists an injective function
    // from the set to the range 0..n-1 (values outside of the set can be any Nat)
    define cardinality_bounded_above(self, n: Nat) -> Bool {
        exists(f: K -> Nat) {
            bounded_by_n(self, n, f) and injective_restricted(self, f)
        }
    }

    // A set is finite if its cardinality is bounded above by some natural number
    define is_finite(self) -> Bool {
        exists(n: Nat) {
            self.cardinality_bounded_above(n)
        }
    }
}

define contained_in_range<K>(s: Set<K>, n: Nat, f: Nat -> K) -> Bool {
    // This is a helper function to prove that the function is injective
    forall(x: Nat) {
        x < n implies s.contains(f(x))
    }
}

define injective_from_range<K>(s: Set<K>, n: Nat, f: Nat -> K) -> Bool {
    // This is a helper function to prove that the function is injective
    forall(x: Nat, y: Nat) {
        if (x < n and y < n) {
            f(x) = f(y) implies x = y
        }
    }
}

// A set's cardinality is bounded below by `n >= 1` if there exists an injective function
// from the range 0..n-1 to the set

theorem empty_set_has_card_0<K> {
    Set<K>.empty_set.cardinality_bounded_above(Nat.0)
} by {
    let e = Set<K>.empty_set

    e.cardinality_bounded_above(Nat.0)
}

theorem empty_set_is_finite<K> {
    Set<K>.empty_set.is_finite
}

theorem singleton_set_has_cardinality_at_most_one<K>(a: K) {
    Set<K>.singleton(a).cardinality_bounded_above(Nat.1)
} by {
    let s = Set<K>.singleton(a)

    // Obvious function mapping everything to 0
    let f = function(x: K) {
        Nat.0
    }

    bounded_by_n(s, Nat.1, f)

    // Prove injective
    forall(x: K, y: K) {
        if (s.contains(x) and s.contains(y)) {
            // Can only be true when x = y
            x = a
            y = a
            f(x) = f(y) implies x = y
        }
    }
}

theorem singleton_set_is_finite<K>(s: Set<K>) {
    s.is_singleton implies s.is_finite
}

theorem cardinality_at_most_one_is_singleton_or_empty<K>(s: Set<K>) {
    s.cardinality_bounded_above(Nat.1) implies s.is_singleton or s.is_empty
} by {
    if s.is_empty {
        true
    } else {
        let (f: K -> Nat) satisfy {
            bounded_by_n(s, Nat.1, f) and injective_restricted(s, f)
        }

        let (a: K) satisfy {
            f(a) = Nat.0 and s.contains(a)
        }

        forall(x: K) {
            if s.contains(x) {
                f(x) = Nat.0 implies x = a
            }
        }

        let singleton_a = Set<K>.singleton(a)

        forall(x: K) {
            if x != a {
                not s.contains(x)
                not singleton_a.contains(x)
            } if x = a {
                s.contains(x)
                singleton_a.contains(x)
            }

            // Struggles with this one?
            s.contains(x) implies singleton_a.contains(x)
            singleton_a.contains(x) implies s.contains(x)
            singleton_a.contains(x) = s.contains(x)
        }

        s.contains = singleton_a.contains
        s.is_singleton
    }
}